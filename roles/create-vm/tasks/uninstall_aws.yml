# Implement your uninstall deployment tasks here
# -------------------------------------------------

- name: get ec2 instance information
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ instance_name }}"
      instance-state-name: ["running", "stopped", "stopping"]
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  register: ec2_instances

- name: terminate ec2 instance
  amazon.aws.ec2_instance:
    instance_ids: "{{ item.instance_id }}"
    state: terminated
    wait: true
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  loop: "{{ ec2_instances.instances }}"
  when: ec2_instances.instances | length > 0
  ignore_errors: true

- name: get vpc information
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ vnet_name }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  register: vpc_info

- name: get route table information
  amazon.aws.ec2_vpc_route_table_info:
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
      "tag:Name": "{{ vnet_name }}-rt"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  register: route_table_info
  when: vpc_info.vpcs | length > 0

- name: delete custom route table
  amazon.aws.ec2_vpc_route_table:
    route_table_id: "{{ item.route_table_id }}"
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    lookup: id
    state: absent
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  loop: "{{ route_table_info.route_tables }}"
  when: 
    - vpc_info.vpcs | length > 0
    - route_table_info.route_tables | length > 0
    - not item.associations[0].main
  ignore_errors: true

- name: get internet gateway information
  amazon.aws.ec2_vpc_igw_info:
    filters:
      "tag:Name": "{{ vnet_name }}-igw"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  register: igw_info

- name: detach and delete internet gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    state: absent
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  when: 
    - vpc_info.vpcs | length > 0
    - igw_info.internet_gateways | length > 0
  ignore_errors: true

- name: get security group information
  amazon.aws.ec2_security_group_info:
    filters:
      group-name: "{{ nsg_name }}"
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  register: security_group_info
  when: vpc_info.vpcs | length > 0
  ignore_errors: true

- name: get all security groups in vpc (fallback)
  amazon.aws.ec2_security_group_info:
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  register: all_security_groups
  when: 
    - vpc_info.vpcs | length > 0
    - security_group_info.security_groups | length == 0

- name: delete security group (by name)
  amazon.aws.ec2_security_group:
    group_id: "{{ item.group_id }}"
    state: absent
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  loop: "{{ security_group_info.security_groups }}"
  when: 
    - vpc_info.vpcs | length > 0
    - security_group_info.security_groups | length > 0
  ignore_errors: true

- name: delete security group (fallback - exclude default)
  amazon.aws.ec2_security_group:
    group_id: "{{ item.group_id }}"
    state: absent
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  loop: "{{ all_security_groups.security_groups }}"
  when: 
    - vpc_info.vpcs | length > 0
    - security_group_info.security_groups | length == 0
    - all_security_groups.security_groups | length > 0
    - item.group_name != 'default'
  ignore_errors: true

- name: get subnet information
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      "tag:Name": "{{ subnet_name }}"
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  register: subnet_info
  when: vpc_info.vpcs | length > 0

- name: delete subnet
  amazon.aws.ec2_vpc_subnet:
    cidr: "{{ item.cidr_block }}"
    vpc_id: "{{ item.vpc_id }}"
    state: absent
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  loop: "{{ subnet_info.subnets }}"
  when: 
    - vpc_info.vpcs | length > 0
    - subnet_info.subnets | length > 0
  ignore_errors: true

- name: delete vpc
  amazon.aws.ec2_vpc_net:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    state: absent
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  when: vpc_info.vpcs | length > 0
  ignore_errors: true

- name: delete key pair
  amazon.aws.ec2_key:
    name: "{{ ssh_public_key_name }}"
    state: absent
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_default_region }}"
  ignore_errors: true
