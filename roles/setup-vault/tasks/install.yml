# Implement your install deployment tasks here
# -------------------------------------------------

- name: create vault application
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'vault-app.yml.j2') | from_yaml }}"
    kubeconfig: "{{ local_kubeconfig_file }}"

- name: wait for pod to be ready
  k8s_info:
    kind: Pod
    name: vault-0
    namespace: {{ platform_vault_namespace }}
    kubeconfig: "{{ local_kubeconfig_file }}"
  register: r_vault
  retries: 120
  delay: 5
  until:
  - r_vault.resources is defined
  - r_vault.resources | length > 0
  - r_vault.resources[0].status is defined
  - r_vault.resources[0].status.phase is defined
  - r_vault.resources[0].status.phase == 'Running'

- name: copy unsealing key
  shell: |
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace }} --stdin --tty -- cat /vault/data/vault-auto-unseal-keys.txt > /tmp/vault-auto-unseal-keys.txt
  register: r_copy
  retries: 60
  delay: 5
  until: r_copy is not failed

- name: get login token
  ansible.builtin.shell: >-
    grep -A 0 root_token /tmp/vault-auto-unseal-keys.txt | sed 's/root_token: //g'
  register: r_token

- name: set vault token fact
  ansible.builtin.set_fact:
    platform_vault_token: "{{ r_token.stdout }}"

- name: create vault auth resources
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
    kubeconfig: "{{ local_kubeconfig_file }}"
  loop:
  - secret-vault-token.yml.j2
  - service-account-vault.yml.j2
  - cluster-role-binding-role-token-review.yml.j2
  - secret-vault-auth.yml.j2

- name: login to vault
  ansible.builtin.shell: |
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace }} --stdin --tty -- vault login {{ platform_vault_token }}
  register: r_vault_login
  until: r_vault_login is not failed
  retries: 30
  delay: 10

- name: create vault policy
  shell: |
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- bash -c 'rm -rf /tmp/rhdh-policy.hcl'
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- bash -c 'echo path \"*\" >> /tmp/rhdh-policy.hcl'
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- bash -c 'echo {  capabilities = [\"read\", \"list\"] >> /tmp/rhdh-policy.hcl'
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- bash -c 'echo } >> /tmp/rhdh-policy.hcl'
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- bash -c 'vault policy write rhdh-policy /tmp/rhdh-policy.hcl'

- name: enable kubernetes auth
  shell: |
    export SA_SECRET_NAME=$(oc get secrets --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} --output=json \
    | jq -r '.items[].metadata | select(.name|startswith("vault-auth-secret")).name')
    export SA_JWT_TOKEN=$(oc get secret $SA_SECRET_NAME --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} \
    --output 'go-template={{ "{{" }} .data.token {{ "}}" }}' | base64 --decode)
    export SA_CA_CRT=$(oc config view --raw --minify --flatten \
    --output 'jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode)
    export K8S_HOST=$(oc config view --raw --minify --flatten \
    --output 'jsonpath={.clusters[].cluster.server}')
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- vault auth enable kubernetes
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- vault write auth/kubernetes/config \
    token_reviewer_jwt="$SA_JWT_TOKEN" \
    kubernetes_host="$K8S_HOST" \
    kubernetes_ca_cert="$SA_CA_CRT" \
    issuer="https://kubernetes.default.svc.cluster.local"

- name: create role and service account authentication
  shell: |
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} -- vault write auth/kubernetes/role/rhdh-role \
    bound_service_account_names=vault-auth \
    bound_service_account_namespaces={{ platform_vault_namespace
    }} \
    token_policies=rhdh-policy \
    ttl=160h
    export SA_SECRET_NAME=$(oc get secrets --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} --output=json \
    | jq -r '.items[].metadata | select(.name|startswith("vault-auth-secret")).name')
    export SA_JWT_TOKEN=$(oc get secret $SA_SECRET_NAME --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace
    }} \
    --output 'go-template={{ "{{" }} .data.token {{ "}}" }}' | base64 --decode)
    oc exec vault-0 -n vault -- vault write auth/kubernetes/login role=rhdh-role jwt=$SA_JWT_TOKEN
  register: r_create_role
  until: r_create_role is succeeded
  retries: 10
  delay: 5

- name: enable kv version 2
  shell: |
    oc exec vault-0 --kubeconfig="$HOME/.kube/{{ cluster_fqn }}" -n {{ platform_vault_namespace }} -- vault secrets enable -version=2 kv